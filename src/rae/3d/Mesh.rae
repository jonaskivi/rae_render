module rae.3d.Mesh

#TODO import cpp.glm.glm
#using glm
#TODO import cpp.GL.glew

# using keyword is TODO
import glm.glm # using glm

#TODO private import:
# priv import GL.glew
import GL.glew

class Mesh
{
pub:

#+
	func init()
	{
		id = 32
	}

	func init(int set_id)
	{
		id = set_id
	}
	
	func free
	{
		#Semicolons don't work at the moment, so don't use them

		glDeleteBuffers(1, vertexBufferID) # in C++: glDeleteBuffers(1, &vertexBufferID);
		glDeleteBuffers(1, uvBufferID)
		glDeleteBuffers(1, normalBufferID)
		glDeleteBuffers(1, indexBufferID)
	}

	int id

+#

	#*
	prop int id { get; set : priv }

	prop int id2
	{
		get
		set : priv
	}

	prop int id3
	{
		get return id3
		set id3 = set : priv
	}

	prop int id4
	{
		get
		{
			return id4 + something
		}
		set
		{
			id4 = cos(set)
		}
	}
	*#

	func generateBox
	{
		log("Generating Mesh.")

		float boxSize = 0.5f // Actually half of the box size

		#* C++11 needed here:
		vertices =
		[
			glm.vec3(-boxSize,  boxSize,  boxSize), # 0
			glm.vec3( boxSize,  boxSize,  boxSize), # 1
			glm.vec3( boxSize,  boxSize, -boxSize), # 2
			glm.vec3(-boxSize,  boxSize, -boxSize), # 3

			glm.vec3(-boxSize, -boxSize,  boxSize), # 4
			glm.vec3(-boxSize, -boxSize, -boxSize), # 5
			glm.vec3( boxSize, -boxSize, -boxSize), # 6
			glm.vec3( boxSize, -boxSize,  boxSize), # 7

			glm.vec3(-boxSize, -boxSize, -boxSize), # 8
			glm.vec3(-boxSize,  boxSize, -boxSize), # 9
			glm.vec3( boxSize,  boxSize, -boxSize), # 10
			glm.vec3( boxSize, -boxSize, -boxSize), # 11
			
			glm.vec3( boxSize, -boxSize,  boxSize), # 12
			glm.vec3( boxSize,  boxSize,  boxSize), # 13
			glm.vec3(-boxSize,  boxSize,  boxSize), # 14
			glm.vec3(-boxSize, -boxSize,  boxSize), # 15

			glm.vec3(-boxSize, -boxSize,  boxSize), # 16
			glm.vec3(-boxSize,  boxSize,  boxSize), # 17
			glm.vec3(-boxSize,  boxSize, -boxSize), # 18
			glm.vec3(-boxSize, -boxSize, -boxSize), # 19
			
			glm.vec3( boxSize, -boxSize, -boxSize), # 20
			glm.vec3( boxSize,  boxSize, -boxSize), # 21
			glm.vec3( boxSize,  boxSize,  boxSize), # 22
			glm.vec3( boxSize, -boxSize,  boxSize) # 23
		]

		uvs =
		[
			glm.vec2( 1.0f,  0.0f ), # 0
			glm.vec2( 1.0f,  1.0f ), # 1
			glm.vec2( 0.0f,  1.0f ), # 2
			glm.vec2( 0.0f,  0.0f ), # 3
			
			glm.vec2( 1.0f,  0.0f ), # 0
			glm.vec2( 1.0f,  1.0f ), # 1
			glm.vec2( 0.0f,  1.0f ), # 2
			glm.vec2( 0.0f,  0.0f ), # 3

			glm.vec2( 1.0f,  0.0f ), # 0
			glm.vec2( 1.0f,  1.0f ), # 1
			glm.vec2( 0.0f,  1.0f ), # 2
			glm.vec2( 0.0f,  0.0f ), # 3

			glm.vec2( 1.0f,  0.0f ), # 0
			glm.vec2( 1.0f,  1.0f ), # 1
			glm.vec2( 0.0f,  1.0f ), # 2
			glm.vec2( 0.0f,  0.0f ), # 3

			glm.vec2( 1.0f,  0.0f ), # 0
			glm.vec2( 1.0f,  1.0f ), # 1
			glm.vec2( 0.0f,  1.0f ), # 2
			glm.vec2( 0.0f,  0.0f ), # 3

			glm.vec2( 1.0f,  0.0f ), # 0
			glm.vec2( 1.0f,  1.0f ), # 1
			glm.vec2( 0.0f,  1.0f ), # 2
			glm.vec2( 0.0f,  0.0f )  # 3
		]
		*#

		# *--------*
		# |\      /|
		# | *----* |
		# | |    | |
		# | *----* |
		# |/      \|
		# *--------*

		# 0--------1
		#  \      /
		#   3----2 
		#       
		#   5----6 
		#  /      \
		# 4--------7

		# 14------13
		# |        |
		# | 9---10 |
		# | |    | |
		# | 8---11 |
		# |        |
		# 15------12

		# 17       22
		# |\      /|
		# | 18   21|
		# | |    | |
		# | 19   20|
		# |/      \|
		# 16      23

		#* C++11 needed here:
		normals =
		[
			glm.vec3( 0.0f,  1.0f,  0.0f), # 0
			glm.vec3( 0.0f,  1.0f,  0.0f), # 1
			glm.vec3( 0.0f,  1.0f,  0.0f), # 2
			glm.vec3( 0.0f,  1.0f,  0.0f), # 3
			
			glm.vec3( 0.0f,  -1.0f,  0.0f), # 0
			glm.vec3( 0.0f,  -1.0f,  0.0f), # 1
			glm.vec3( 0.0f,  -1.0f,  0.0f), # 2
			glm.vec3( 0.0f,  -1.0f,  0.0f), # 3

			glm.vec3( 0.0f,  0.0f,  -1.0f), # 0
			glm.vec3( 0.0f,  0.0f,  -1.0f), # 1
			glm.vec3( 0.0f,  0.0f,  -1.0f), # 2
			glm.vec3( 0.0f,  0.0f,  -1.0f), # 3

			glm.vec3( 0.0f,  0.0f,  1.0f), # 0
			glm.vec3( 0.0f,  0.0f,  1.0f), # 1
			glm.vec3( 0.0f,  0.0f,  1.0f), # 2
			glm.vec3( 0.0f,  0.0f,  1.0f), # 3

			glm.vec3( -1.0f,  0.0f,  0.0f), # 0
			glm.vec3( -1.0f,  0.0f,  0.0f), # 1
			glm.vec3( -1.0f,  0.0f,  0.0f), # 2
			glm.vec3( -1.0f,  0.0f,  0.0f), # 3

			glm.vec3( 1.0f,  0.0f,  0.0f), # 0
			glm.vec3( 1.0f,  0.0f,  0.0f), # 1
			glm.vec3( 1.0f,  0.0f,  0.0f), # 2
			glm.vec3( 1.0f,  0.0f,  0.0f) # 3
		]

		
		
		indices =
		[
			#roof
			0, 1, 2,
			0, 2, 3,
			
			#floor
			4, 5, 6, 
			4, 6, 7, 
			
			#back
			8, 9, 10,
			8, 10, 11,

			#front
			12, 13, 14,
			12, 14, 15,

			#left
			16, 17, 18,
			16, 18, 19,

			#right
			20, 21, 22,
			20, 22, 23
		]
		*#

		#The visual studio 2012 version:

		vertices.create(-boxSize,  boxSize,  boxSize) # 0
		vertices.create( boxSize,  boxSize,  boxSize) # 1
		vertices.create( boxSize,  boxSize, -boxSize) # 2
		vertices.create(-boxSize,  boxSize, -boxSize) # 3
		vertices.create(-boxSize, -boxSize,  boxSize) # 4
		vertices.create(-boxSize, -boxSize, -boxSize) # 5
		vertices.create( boxSize, -boxSize, -boxSize) # 6
		vertices.create( boxSize, -boxSize,  boxSize) # 7
		vertices.create(-boxSize, -boxSize, -boxSize) # 8
		vertices.create(-boxSize,  boxSize, -boxSize) # 9
		vertices.create( boxSize,  boxSize, -boxSize) # 10
		vertices.create( boxSize, -boxSize, -boxSize) # 11
		vertices.create( boxSize, -boxSize,  boxSize) # 12
		vertices.create( boxSize,  boxSize,  boxSize) # 13
		vertices.create(-boxSize,  boxSize,  boxSize) # 14
		vertices.create(-boxSize, -boxSize,  boxSize) # 15
		vertices.create(-boxSize, -boxSize,  boxSize) # 16
		vertices.create(-boxSize,  boxSize,  boxSize) # 17
		vertices.create(-boxSize,  boxSize, -boxSize) # 18
		vertices.create(-boxSize, -boxSize, -boxSize) # 19
		vertices.create( boxSize, -boxSize, -boxSize) # 20
		vertices.create( boxSize,  boxSize, -boxSize) # 21
		vertices.create( boxSize,  boxSize,  boxSize) # 22
		vertices.create( boxSize, -boxSize,  boxSize) # 23

		uvs.create( 1.0f,  0.0f ) # 0
		uvs.create( 1.0f,  1.0f ) # 1
		uvs.create( 0.0f,  1.0f ) # 2
		uvs.create( 0.0f,  0.0f ) # 3
		uvs.create( 1.0f,  0.0f ) # 0
		uvs.create( 1.0f,  1.0f ) # 1
		uvs.create( 0.0f,  1.0f ) # 2
		uvs.create( 0.0f,  0.0f ) # 3
		uvs.create( 1.0f,  0.0f ) # 0
		uvs.create( 1.0f,  1.0f ) # 1
		uvs.create( 0.0f,  1.0f ) # 2
		uvs.create( 0.0f,  0.0f ) # 3
		uvs.create( 1.0f,  0.0f ) # 0
		uvs.create( 1.0f,  1.0f ) # 1
		uvs.create( 0.0f,  1.0f ) # 2
		uvs.create( 0.0f,  0.0f ) # 3
		uvs.create( 1.0f,  0.0f ) # 0
		uvs.create( 1.0f,  1.0f ) # 1
		uvs.create( 0.0f,  1.0f ) # 2
		uvs.create( 0.0f,  0.0f ) # 3
		uvs.create( 1.0f,  0.0f ) # 0
		uvs.create( 1.0f,  1.0f ) # 1
		uvs.create( 0.0f,  1.0f ) # 2
		uvs.create( 0.0f,  0.0f ) # 3

		# *--------*
		# |\      /|
		# | *----* |
		# | |    | |
		# | *----* |
		# |/      \|
		# *--------*

		# 0--------1
		#  \      /
		#   3----2 
		#       
		#   5----6 
		#  /      \
		# 4--------7

		# 14------13
		# |        |
		# | 9---10 |
		# | |    | |
		# | 8---11 |
		# |        |
		# 15------12

		# 17       22
		# |\      /|
		# | 18   21|
		# | |    | |
		# | 19   20|
		# |/      \|
		# 16      23

		normals.create( 0.0f,  1.0f,  0.0f) # 0
		normals.create( 0.0f,  1.0f,  0.0f) # 1
		normals.create( 0.0f,  1.0f,  0.0f) # 2
		normals.create( 0.0f,  1.0f,  0.0f) # 3
		normals.create( 0.0f, -1.0f,  0.0f) # 0
		normals.create( 0.0f, -1.0f,  0.0f) # 1
		normals.create( 0.0f, -1.0f,  0.0f) # 2
		normals.create( 0.0f, -1.0f,  0.0f) # 3
		normals.create( 0.0f,  0.0f, -1.0f) # 0
		normals.create( 0.0f,  0.0f, -1.0f) # 1
		normals.create( 0.0f,  0.0f, -1.0f) # 2
		normals.create( 0.0f,  0.0f, -1.0f) # 3
		normals.create( 0.0f,  0.0f,  1.0f) # 0
		normals.create( 0.0f,  0.0f,  1.0f) # 1
		normals.create( 0.0f,  0.0f,  1.0f) # 2
		normals.create( 0.0f,  0.0f,  1.0f) # 3
		normals.create(-1.0f,  0.0f,  0.0f) # 0
		normals.create(-1.0f,  0.0f,  0.0f) # 1
		normals.create(-1.0f,  0.0f,  0.0f) # 2
		normals.create(-1.0f,  0.0f,  0.0f) # 3
		normals.create( 1.0f,  0.0f,  0.0f) # 0
		normals.create( 1.0f,  0.0f,  0.0f) # 1
		normals.create( 1.0f,  0.0f,  0.0f) # 2
		normals.create( 1.0f,  0.0f,  0.0f) # 3

		
		#roof
		indices.add(0)
		indices.add(1)
		indices.add(2)
		indices.add(0)
		indices.add(2)
		indices.add(3)
		
		#floor
		indices.add(4)
		indices.add(5)
		indices.add(6)
		indices.add(4)
		indices.add(6)
		indices.add(7)
		
		#back
		indices.add(8)
		indices.add(9)
		indices.add(10)
		indices.add(8)
		indices.add(10)
		indices.add(11)

		#front
		indices.add(12)
		indices.add(13)
		indices.add(14)
		indices.add(12)
		indices.add(14)
		indices.add(15)

		#left
		indices.add(16)
		indices.add(17)
		indices.add(18)
		indices.add(16)
		indices.add(18)
		indices.add(19)

		#right
		indices.add(20)
		indices.add(21)
		indices.add(22)
		indices.add(20)
		indices.add(22)
		indices.add(23)

		log("size of: vertices: ", vertices.size, " size of indices: ", indices.size )
	}

	func createVBOs
	{
		log("Mesh.createVBOs")

		glGenBuffers(1, vertexBufferID)
		glBindBuffer(GL_ARRAY_BUFFER, vertexBufferID)
		glBufferData(GL_ARRAY_BUFFER, vertices.size * sizeof(glm.vec3), vertices, GL_STATIC_DRAW)

		glGenBuffers(1, uvBufferID)
		glBindBuffer(GL_ARRAY_BUFFER, uvBufferID)
		glBufferData(GL_ARRAY_BUFFER, uvs.size * sizeof(glm.vec2), uvs, GL_STATIC_DRAW)

		glGenBuffers(1, normalBufferID)
		glBindBuffer(GL_ARRAY_BUFFER, normalBufferID)
		glBufferData(GL_ARRAY_BUFFER, normals.size * sizeof(glm.vec3), normals, GL_STATIC_DRAW)

		glGenBuffers(1, indexBufferID)
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBufferID)
		glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size * sizeof(ushort), indices, GL_STATIC_DRAW)
	}

	func render(uint set_shader_program_id)
	{
		glUseProgram(set_shader_program_id)

		# Get a handle for our buffers
		GLuint vertex_position_id = glGetAttribLocation(set_shader_program_id, "inPosition")
		GLuint vertex_uv_id = glGetAttribLocation(set_shader_program_id, "inUV")
		GLuint vertex_normal_id = glGetAttribLocation(set_shader_program_id, "inNormal")

		# vertices
		glEnableVertexAttribArray(vertex_position_id)
		glBindBuffer(GL_ARRAY_BUFFER, vertexBufferID)
		glVertexAttribPointer( vertex_position_id, 3, GL_FLOAT, GL_FALSE, 0, 0 )

		#(void*)

		# UVs
		glEnableVertexAttribArray(vertex_uv_id)
		glBindBuffer(GL_ARRAY_BUFFER, uvBufferID)
		glVertexAttribPointer( vertex_uv_id, 2, GL_FLOAT, GL_FALSE, 0, 0 )

		# normals
		glEnableVertexAttribArray(vertex_normal_id)
		glBindBuffer(GL_ARRAY_BUFFER, normalBufferID)
		glVertexAttribPointer( vertex_normal_id, 3, GL_FLOAT, GL_FALSE, 0, 0 )

		# Index buffer
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBufferID)

		glDrawElements( GL_TRIANGLES, (GLsizei)indices.size(), GL_UNSIGNED_SHORT, 0 )

		glDisableVertexAttribArray(vertex_position_id)
		glDisableVertexAttribArray(vertex_uv_id)
		glDisableVertexAttribArray(vertex_normal_id)
	}

priv:
	[glm.vec3] vertices
	[glm.vec2] uvs
	[glm.vec3] normals
	[ushort] indices

	uint vertexBufferID
	uint uvBufferID
	uint normalBufferID
	uint indexBufferID
}
