// this file is automatically created from Rae programming language module:
//c:\Users\jonaz\Dropbox\jonas\2015\ohjelmointi\rae_render\src/cpp/rae/3d/Shader
type:empty name:<rae.3d.Shader> Token::MODULE line: 1 rae.3d.Shader
	type:empty name:<rae>    Token::MODULE_DIR line: 1 rae.3d.Shader.rae
	type:empty name:<3d>     Token::MODULE_DIR line: 1 rae.3d.Shader.3d
	type:empty name:<Shader> Token::MODULE_NAME line: 2 rae.3d.Shader.Shader
	NEWLINE
	NEWLINE
	type:empty name:<@cpp>   Token::PRAGMA_CPP line: 4 rae.3d.Shader.@cpp
	RETURN WHICH IS NOT NEWLINE.
	type:empty name:<#include <fstream>
> Token::PASSTHROUGH_HDR line: 5 rae.3d.Shader.#include <fstream>

	type:empty name:<#include <algorithm>
> Token::PASSTHROUGH_HDR line: 6 rae.3d.Shader.#include <algorithm>

	type:empty name:<#include <stdlib.h> // TODO get rid of getchar()
> Token::PASSTHROUGH_HDR line: 7 rae.3d.Shader.#include <stdlib.h> // TODO get rid of getchar()

	type:empty name:<@end>   Token::PRAGMA_CPP_END line: 8 rae.3d.Shader.@end
	NEWLINE
	NEWLINE
	type:empty name:<#include <string.h>> Token::COMMENT line: 10 rae.3d.Shader.#include <string.h>
	NEWLINE
	NEWLINE
	type:empty name:<import> Token::IMPORT line: 11 rae.3d.Shader.import
		type:empty name:<GL>     Token::IMPORT_NAME line: 11 rae.3d.Shader.import.GL
		type:empty name:<glew>   Token::IMPORT_NAME line: 12 rae.3d.Shader.import.glew
	NEWLINE
	NEWLINE
	type:<Shader> name:<Shader> Token::CLASS line: 14 rae.3d.Shader.Shader
		NEWLINE
		type:empty name:<{>      Token::SCOPE_BEGIN line: 14 rae.3d.Shader.Shader.{
		NEWLINE
		type:empty name:<free>   Token::DESTRUCTOR line: 142 rae.3d.Shader.Shader.free
			type:empty name:<(>      Token::PARENTHESIS_BEGIN_FUNC_PARAM_TYPES line: 142 rae.3d.Shader.Shader.free.(
			type:empty name:<)>      Token::PARENTHESIS_END_FUNC_PARAM_TYPES line: 142 rae.3d.Shader.Shader.free.)
			type:empty name:empty    Token::NEWLINE line: 142 rae.3d.Shader.Shader.free.
			type:empty name:<{>      Token::SCOPE_BEGIN line: 142 rae.3d.Shader.Shader.free.{
			type:empty name:empty    Token::NEWLINE_BEFORE_SCOPE_END line: 142 rae.3d.Shader.Shader.free.
			type:empty name:<}>      Token::SCOPE_END line: 142 rae.3d.Shader.Shader.free.}
		NEWLINE
		type:empty name:<pub>    Token::VISIBILITY_DEFAULT line: 15 rae.3d.Shader.Shader.pub
		NEWLINE
		NEWLINE
		type:<uint> name:<shaderID> Token::DEFINE_REFERENCE typetype: TypeType::BUILT_IN_TYPE line: 17 rae.3d.Shader.Shader.shaderID
			type:empty name:<=>      Token::INIT_DATA line: 17 rae.3d.Shader.Shader.=
				type:empty name:<0>      Token::NUMBER line: 17 rae.3d.Shader.Shader.=.0
		type:empty name:<=>      Token::INIT_DATA line: 17 rae.3d.Shader.Shader.=
			type:empty name:<0>      Token::NUMBER line: 17 rae.3d.Shader.Shader.=.0
		type:empty name:<;>      Token::SEMICOLON line: 17 rae.3d.Shader.Shader.;
		NEWLINE
		NEWLINE
		type:empty name:<init>   Token::CONSTRUCTOR line: 19 rae.3d.Shader.Shader.init
			type:empty name:<(>      Token::PARENTHESIS_BEGIN_FUNC_PARAM_TYPES line: 19 rae.3d.Shader.Shader.init.(
			type:empty name:<)>      Token::PARENTHESIS_END_FUNC_PARAM_TYPES line: 19 rae.3d.Shader.Shader.init.)
			NEWLINE
			type:<uint> name:<shaderID> Token::AUTO_INIT typetype: TypeType::BUILT_IN_TYPE line: 17 rae.3d.Shader.Shader.shaderID
				type:empty name:<=>      Token::INIT_DATA line: 17 rae.3d.Shader.Shader.=
					type:empty name:<0>      Token::NUMBER line: 17 rae.3d.Shader.Shader.=.0
			NEWLINE
			type:empty name:<{>      Token::SCOPE_BEGIN line: 20 rae.3d.Shader.Shader.init.{
			NEWLINE
			type:empty name:<}>      Token::SCOPE_END line: 21 rae.3d.Shader.Shader.init.}
		NEWLINE
		NEWLINE
		type:empty name:<init>   Token::CONSTRUCTOR line: 23 rae.3d.Shader.Shader.init
			type:empty name:<(>      Token::PARENTHESIS_BEGIN_FUNC_PARAM_TYPES line: 23 rae.3d.Shader.Shader.init.(
			type:<string> name:<vertex_file_path> Token::DEFINE_REFERENCE typetype: TypeType::BUILT_IN_TYPE line: 23 rae.3d.Shader.Shader.init.vertex_file_path
			type:empty name:<,>      Token::COMMA line: 23 rae.3d.Shader.Shader.init.,
			type:<string> name:<fragment_file_path> Token::DEFINE_REFERENCE typetype: TypeType::BUILT_IN_TYPE line: 23 rae.3d.Shader.Shader.init.fragment_file_path
			type:empty name:<)>      Token::PARENTHESIS_END_FUNC_PARAM_TYPES line: 23 rae.3d.Shader.Shader.init.)
			NEWLINE
			type:<uint> name:<shaderID> Token::AUTO_INIT typetype: TypeType::BUILT_IN_TYPE line: 17 rae.3d.Shader.Shader.shaderID
				type:empty name:<=>      Token::INIT_DATA line: 17 rae.3d.Shader.Shader.=
					type:empty name:<0>      Token::NUMBER line: 17 rae.3d.Shader.Shader.=.0
			NEWLINE
			type:empty name:<{>      Token::SCOPE_BEGIN line: 24 rae.3d.Shader.Shader.init.{
			NEWLINE
			type:empty name:<loadShader> Token::FUNC_CALL line: 25 rae.3d.Shader.Shader.init.loadShader
			type:empty name:<(>      Token::PARENTHESIS_BEGIN line: 25 rae.3d.Shader.Shader.init.(
			type:<string> name:<vertex_file_path> Token::USE_REFERENCE typetype: TypeType::BUILT_IN_TYPE line: 25 rae.3d.Shader.Shader.init.vertex_file_path
			type:empty name:<,>      Token::COMMA line: 25 rae.3d.Shader.Shader.init.,
			type:<string> name:<fragment_file_path> Token::USE_REFERENCE typetype: TypeType::BUILT_IN_TYPE line: 25 rae.3d.Shader.Shader.init.fragment_file_path
			type:empty name:<)>      Token::PARENTHESIS_END line: 25 rae.3d.Shader.Shader.init.)
			NEWLINE
			type:empty name:<}>      Token::SCOPE_END line: 26 rae.3d.Shader.Shader.init.}
		NEWLINE
		NEWLINE
		type:empty name:<use>    Token::FUNC line: 28 rae.3d.Shader.Shader.use
			NEWLINE
			type:empty name:<{>      Token::SCOPE_BEGIN line: 29 rae.3d.Shader.Shader.use.{
			NEWLINE
			type:empty name:<glUseProgram> Token::FUNC_CALL line: 30 rae.3d.Shader.Shader.use.glUseProgram
			type:empty name:<(>      Token::PARENTHESIS_BEGIN line: 30 rae.3d.Shader.Shader.use.(
			type:<uint> name:<shaderID> Token::USE_REFERENCE typetype: TypeType::BUILT_IN_TYPE line: 30 rae.3d.Shader.Shader.use.shaderID
			type:empty name:<)>      Token::PARENTHESIS_END line: 30 rae.3d.Shader.Shader.use.)
			type:empty name:<;>      Token::SEMICOLON line: 30 rae.3d.Shader.Shader.use.;
			NEWLINE
			type:empty name:<}>      Token::SCOPE_END line: 31 rae.3d.Shader.Shader.use.}
		NEWLINE
		NEWLINE
		type:empty name:<loadShader> Token::FUNC line: 33 rae.3d.Shader.Shader.loadShader
			type:empty name:<(>      Token::PARENTHESIS_BEGIN_FUNC_RETURN_TYPES line: 33 rae.3d.Shader.Shader.loadShader.(
			type:<uint> name:empty   Token::DEFINE_REFERENCE typetype: TypeType::BUILT_IN_TYPE line: 33 rae.3d.Shader.Shader.loadShader.
			type:empty name:<)>      Token::PARENTHESIS_END_FUNC_RETURN_TYPES line: 33 rae.3d.Shader.Shader.loadShader.)
			type:empty name:<(>      Token::PARENTHESIS_BEGIN_FUNC_PARAM_TYPES line: 33 rae.3d.Shader.Shader.loadShader.(
			type:<string> name:<vertex_file_path> Token::DEFINE_REFERENCE typetype: TypeType::BUILT_IN_TYPE line: 33 rae.3d.Shader.Shader.loadShader.vertex_file_path
			type:empty name:<,>      Token::COMMA line: 33 rae.3d.Shader.Shader.loadShader.,
			type:<string> name:<fragment_file_path> Token::DEFINE_REFERENCE typetype: TypeType::BUILT_IN_TYPE line: 33 rae.3d.Shader.Shader.loadShader.fragment_file_path
			type:empty name:<)>      Token::PARENTHESIS_END_FUNC_PARAM_TYPES line: 33 rae.3d.Shader.Shader.loadShader.)
			NEWLINE
			type:empty name:<{>      Token::SCOPE_BEGIN line: 34 rae.3d.Shader.Shader.loadShader.{
			NEWLINE
			type:empty name:<@cpp>   Token::PRAGMA_CPP line: 36 rae.3d.Shader.Shader.loadShader.@cpp
			RETURN WHICH IS NOT NEWLINE.
			type:empty name:<	// Create the shaders
> Token::PASSTHROUGH_SRC line: 37 rae.3d.Shader.Shader.loadShader.	// Create the shaders

			type:empty name:<	GLuint vertexShaderID = glCreateShader(GL_VERTEX_SHADER);
> Token::PASSTHROUGH_SRC line: 38 rae.3d.Shader.Shader.loadShader.	GLuint vertexShaderID = glCreateShader(GL_VERTEX_SHADER);

			type:empty name:<	GLuint fragmentShaderID = glCreateShader(GL_FRAGMENT_SHADER);
> Token::PASSTHROUGH_SRC line: 39 rae.3d.Shader.Shader.loadShader.	GLuint fragmentShaderID = glCreateShader(GL_FRAGMENT_SHADER);

			RETURN WHICH IS NOT NEWLINE.
			type:empty name:<	// Read the Vertex Shader code from the file
> Token::PASSTHROUGH_SRC line: 41 rae.3d.Shader.Shader.loadShader.	// Read the Vertex Shader code from the file

			type:empty name:<	std::string vertexShaderCode;
> Token::PASSTHROUGH_SRC line: 42 rae.3d.Shader.Shader.loadShader.	std::string vertexShaderCode;

			type:empty name:<	std::ifstream vertexShaderStream(vertex_file_path, std::ios::in);
> Token::PASSTHROUGH_SRC line: 43 rae.3d.Shader.Shader.loadShader.	std::ifstream vertexShaderStream(vertex_file_path, std::ios::in);

			type:empty name:<	if(vertexShaderStream.is_open())
> Token::PASSTHROUGH_SRC line: 44 rae.3d.Shader.Shader.loadShader.	if(vertexShaderStream.is_open())

			type:empty name:<	{
>    Token::PASSTHROUGH_SRC line: 45 rae.3d.Shader.Shader.loadShader.	{

			type:empty name:<		std::string Line = "";
> Token::PASSTHROUGH_SRC line: 46 rae.3d.Shader.Shader.loadShader.		std::string Line = "";

			type:empty name:<		while(getline(vertexShaderStream, Line))
> Token::PASSTHROUGH_SRC line: 47 rae.3d.Shader.Shader.loadShader.		while(getline(vertexShaderStream, Line))

			type:empty name:<			vertexShaderCode += "\n" + Line;
> Token::PASSTHROUGH_SRC line: 48 rae.3d.Shader.Shader.loadShader.			vertexShaderCode += "\n" + Line;

			type:empty name:<		vertexShaderStream.close();
> Token::PASSTHROUGH_SRC line: 49 rae.3d.Shader.Shader.loadShader.		vertexShaderStream.close();

			type:empty name:<	}
>    Token::PASSTHROUGH_SRC line: 50 rae.3d.Shader.Shader.loadShader.	}

			type:empty name:<	else
> Token::PASSTHROUGH_SRC line: 51 rae.3d.Shader.Shader.loadShader.	else

			type:empty name:<	{
>    Token::PASSTHROUGH_SRC line: 52 rae.3d.Shader.Shader.loadShader.	{

			type:empty name:<		std::cout << "Can't open shader: "<< vertex_file_path << "\n";
> Token::PASSTHROUGH_SRC line: 53 rae.3d.Shader.Shader.loadShader.		std::cout << "Can't open shader: "<< vertex_file_path << "\n";

			type:empty name:<		getchar();
> Token::PASSTHROUGH_SRC line: 54 rae.3d.Shader.Shader.loadShader.		getchar();

			type:empty name:<		return shaderID = 0;
> Token::PASSTHROUGH_SRC line: 55 rae.3d.Shader.Shader.loadShader.		return shaderID = 0;

			type:empty name:<	}
>    Token::PASSTHROUGH_SRC line: 56 rae.3d.Shader.Shader.loadShader.	}

			RETURN WHICH IS NOT NEWLINE.
			type:empty name:<	// Read the Fragment Shader code from the file
> Token::PASSTHROUGH_SRC line: 58 rae.3d.Shader.Shader.loadShader.	// Read the Fragment Shader code from the file

			type:empty name:<	std::string fragmentShaderCode;
> Token::PASSTHROUGH_SRC line: 59 rae.3d.Shader.Shader.loadShader.	std::string fragmentShaderCode;

			type:empty name:<	std::ifstream fragmentShaderStream(fragment_file_path, std::ios::in);
> Token::PASSTHROUGH_SRC line: 60 rae.3d.Shader.Shader.loadShader.	std::ifstream fragmentShaderStream(fragment_file_path, std::ios::in);

			type:empty name:<	if( fragmentShaderStream.is_open() )
> Token::PASSTHROUGH_SRC line: 61 rae.3d.Shader.Shader.loadShader.	if( fragmentShaderStream.is_open() )

			type:empty name:<	{
>    Token::PASSTHROUGH_SRC line: 62 rae.3d.Shader.Shader.loadShader.	{

			type:empty name:<		std::string Line = "";
> Token::PASSTHROUGH_SRC line: 63 rae.3d.Shader.Shader.loadShader.		std::string Line = "";

			type:empty name:<		while(getline(fragmentShaderStream, Line))
> Token::PASSTHROUGH_SRC line: 64 rae.3d.Shader.Shader.loadShader.		while(getline(fragmentShaderStream, Line))

			type:empty name:<			fragmentShaderCode += "\n" + Line;
> Token::PASSTHROUGH_SRC line: 65 rae.3d.Shader.Shader.loadShader.			fragmentShaderCode += "\n" + Line;

			type:empty name:<		fragmentShaderStream.close();
> Token::PASSTHROUGH_SRC line: 66 rae.3d.Shader.Shader.loadShader.		fragmentShaderStream.close();

			type:empty name:<	}
>    Token::PASSTHROUGH_SRC line: 67 rae.3d.Shader.Shader.loadShader.	}

			type:empty name:<	else
> Token::PASSTHROUGH_SRC line: 68 rae.3d.Shader.Shader.loadShader.	else

			type:empty name:<	{
>    Token::PASSTHROUGH_SRC line: 69 rae.3d.Shader.Shader.loadShader.	{

			type:empty name:<		std::cout << "Can't open shader: "<< fragment_file_path << "\n";
> Token::PASSTHROUGH_SRC line: 70 rae.3d.Shader.Shader.loadShader.		std::cout << "Can't open shader: "<< fragment_file_path << "\n";

			type:empty name:<		getchar();
> Token::PASSTHROUGH_SRC line: 71 rae.3d.Shader.Shader.loadShader.		getchar();

			type:empty name:<		return shaderID = 0;
> Token::PASSTHROUGH_SRC line: 72 rae.3d.Shader.Shader.loadShader.		return shaderID = 0;

			type:empty name:<	}
>    Token::PASSTHROUGH_SRC line: 73 rae.3d.Shader.Shader.loadShader.	}

			RETURN WHICH IS NOT NEWLINE.
			type:empty name:<	GLint result = GL_FALSE;
> Token::PASSTHROUGH_SRC line: 75 rae.3d.Shader.Shader.loadShader.	GLint result = GL_FALSE;

			type:empty name:<	int infoLogLength;
> Token::PASSTHROUGH_SRC line: 76 rae.3d.Shader.Shader.loadShader.	int infoLogLength;

			RETURN WHICH IS NOT NEWLINE.
			type:empty name:<	// Compile Vertex Shader
> Token::PASSTHROUGH_SRC line: 78 rae.3d.Shader.Shader.loadShader.	// Compile Vertex Shader

			type:empty name:<	std::cout << "Compiling vertex shader: " << vertex_file_path << "\n";
> Token::PASSTHROUGH_SRC line: 79 rae.3d.Shader.Shader.loadShader.	std::cout << "Compiling vertex shader: " << vertex_file_path << "\n";

			type:empty name:<	char const * vertexSourcePointer = vertexShaderCode.c_str();
> Token::PASSTHROUGH_SRC line: 80 rae.3d.Shader.Shader.loadShader.	char const * vertexSourcePointer = vertexShaderCode.c_str();

			type:empty name:<	glShaderSource(vertexShaderID, 1, &vertexSourcePointer , NULL);
> Token::PASSTHROUGH_SRC line: 81 rae.3d.Shader.Shader.loadShader.	glShaderSource(vertexShaderID, 1, &vertexSourcePointer , NULL);

			type:empty name:<	glCompileShader(vertexShaderID);
> Token::PASSTHROUGH_SRC line: 82 rae.3d.Shader.Shader.loadShader.	glCompileShader(vertexShaderID);

			RETURN WHICH IS NOT NEWLINE.
			type:empty name:<	// Check Vertex Shader
> Token::PASSTHROUGH_SRC line: 84 rae.3d.Shader.Shader.loadShader.	// Check Vertex Shader

			type:empty name:<	glGetShaderiv(vertexShaderID, GL_COMPILE_STATUS, &result);
> Token::PASSTHROUGH_SRC line: 85 rae.3d.Shader.Shader.loadShader.	glGetShaderiv(vertexShaderID, GL_COMPILE_STATUS, &result);

			type:empty name:<	glGetShaderiv(vertexShaderID, GL_INFO_LOG_LENGTH, &infoLogLength);
> Token::PASSTHROUGH_SRC line: 86 rae.3d.Shader.Shader.loadShader.	glGetShaderiv(vertexShaderID, GL_INFO_LOG_LENGTH, &infoLogLength);

			type:empty name:<	if( infoLogLength > 1 )
> Token::PASSTHROUGH_SRC line: 87 rae.3d.Shader.Shader.loadShader.	if( infoLogLength > 1 )

			type:empty name:<	{
>    Token::PASSTHROUGH_SRC line: 88 rae.3d.Shader.Shader.loadShader.	{

			type:empty name:<		std::cout<<"Error in shader: "<<vertex_file_path << " infoLogLength: " << infoLogLength <<"\n";
> Token::PASSTHROUGH_SRC line: 89 rae.3d.Shader.Shader.loadShader.		std::cout<<"Error in shader: "<<vertex_file_path << " infoLogLength: " << infoLogLength <<"\n";

			type:empty name:<		std::vector<char> vertexShaderErrorMessage(infoLogLength+1);
> Token::PASSTHROUGH_SRC line: 90 rae.3d.Shader.Shader.loadShader.		std::vector<char> vertexShaderErrorMessage(infoLogLength+1);

			type:empty name:<		glGetShaderInfoLog(vertexShaderID, infoLogLength, NULL, &vertexShaderErrorMessage[0]);
> Token::PASSTHROUGH_SRC line: 91 rae.3d.Shader.Shader.loadShader.		glGetShaderInfoLog(vertexShaderID, infoLogLength, NULL, &vertexShaderErrorMessage[0]);

			type:empty name:<		std::cout << &vertexShaderErrorMessage[0] << "\n";
> Token::PASSTHROUGH_SRC line: 92 rae.3d.Shader.Shader.loadShader.		std::cout << &vertexShaderErrorMessage[0] << "\n";

			type:empty name:<		getchar();
> Token::PASSTHROUGH_SRC line: 93 rae.3d.Shader.Shader.loadShader.		getchar();

			type:empty name:<		return shaderID = 0;
> Token::PASSTHROUGH_SRC line: 94 rae.3d.Shader.Shader.loadShader.		return shaderID = 0;

			type:empty name:<	}
>    Token::PASSTHROUGH_SRC line: 95 rae.3d.Shader.Shader.loadShader.	}

			RETURN WHICH IS NOT NEWLINE.
			type:empty name:<	// Compile Fragment Shader
> Token::PASSTHROUGH_SRC line: 97 rae.3d.Shader.Shader.loadShader.	// Compile Fragment Shader

			type:empty name:<	std::cout << "Compiling fragment shader: " << fragment_file_path << "\n";
> Token::PASSTHROUGH_SRC line: 98 rae.3d.Shader.Shader.loadShader.	std::cout << "Compiling fragment shader: " << fragment_file_path << "\n";

			type:empty name:<	char const * fragmentSourcePointer = fragmentShaderCode.c_str();
> Token::PASSTHROUGH_SRC line: 99 rae.3d.Shader.Shader.loadShader.	char const * fragmentSourcePointer = fragmentShaderCode.c_str();

			type:empty name:<	glShaderSource(fragmentShaderID, 1, &fragmentSourcePointer , NULL);
> Token::PASSTHROUGH_SRC line: 100 rae.3d.Shader.Shader.loadShader.	glShaderSource(fragmentShaderID, 1, &fragmentSourcePointer , NULL);

			type:empty name:<	glCompileShader(fragmentShaderID);
> Token::PASSTHROUGH_SRC line: 101 rae.3d.Shader.Shader.loadShader.	glCompileShader(fragmentShaderID);

			RETURN WHICH IS NOT NEWLINE.
			type:empty name:<	// Check Fragment Shader
> Token::PASSTHROUGH_SRC line: 103 rae.3d.Shader.Shader.loadShader.	// Check Fragment Shader

			type:empty name:<	glGetShaderiv(fragmentShaderID, GL_COMPILE_STATUS, &result);
> Token::PASSTHROUGH_SRC line: 104 rae.3d.Shader.Shader.loadShader.	glGetShaderiv(fragmentShaderID, GL_COMPILE_STATUS, &result);

			type:empty name:<	glGetShaderiv(fragmentShaderID, GL_INFO_LOG_LENGTH, &infoLogLength);
> Token::PASSTHROUGH_SRC line: 105 rae.3d.Shader.Shader.loadShader.	glGetShaderiv(fragmentShaderID, GL_INFO_LOG_LENGTH, &infoLogLength);

			type:empty name:<	if( infoLogLength > 1 )
> Token::PASSTHROUGH_SRC line: 106 rae.3d.Shader.Shader.loadShader.	if( infoLogLength > 1 )

			type:empty name:<	{
>    Token::PASSTHROUGH_SRC line: 107 rae.3d.Shader.Shader.loadShader.	{

			type:empty name:<		std::cout<<"Error in shader: "<<fragment_file_path << "\n";
> Token::PASSTHROUGH_SRC line: 108 rae.3d.Shader.Shader.loadShader.		std::cout<<"Error in shader: "<<fragment_file_path << "\n";

			type:empty name:<		std::vector<char> fragmentShaderErrorMessage(infoLogLength+1);
> Token::PASSTHROUGH_SRC line: 109 rae.3d.Shader.Shader.loadShader.		std::vector<char> fragmentShaderErrorMessage(infoLogLength+1);

			type:empty name:<		glGetShaderInfoLog(fragmentShaderID, infoLogLength, NULL, &fragmentShaderErrorMessage[0]);
> Token::PASSTHROUGH_SRC line: 110 rae.3d.Shader.Shader.loadShader.		glGetShaderInfoLog(fragmentShaderID, infoLogLength, NULL, &fragmentShaderErrorMessage[0]);

			type:empty name:<		std::cout << &fragmentShaderErrorMessage[0] << "\n";
> Token::PASSTHROUGH_SRC line: 111 rae.3d.Shader.Shader.loadShader.		std::cout << &fragmentShaderErrorMessage[0] << "\n";

			type:empty name:<		getchar();
> Token::PASSTHROUGH_SRC line: 112 rae.3d.Shader.Shader.loadShader.		getchar();

			type:empty name:<		return shaderID = 0;
> Token::PASSTHROUGH_SRC line: 113 rae.3d.Shader.Shader.loadShader.		return shaderID = 0;

			type:empty name:<	}
>    Token::PASSTHROUGH_SRC line: 114 rae.3d.Shader.Shader.loadShader.	}

			RETURN WHICH IS NOT NEWLINE.
			type:empty name:<	// Link the program
> Token::PASSTHROUGH_SRC line: 116 rae.3d.Shader.Shader.loadShader.	// Link the program

			type:empty name:<	std::cout << "Linking shader program\n";
> Token::PASSTHROUGH_SRC line: 117 rae.3d.Shader.Shader.loadShader.	std::cout << "Linking shader program\n";

			type:empty name:<	GLuint programID = glCreateProgram();
> Token::PASSTHROUGH_SRC line: 118 rae.3d.Shader.Shader.loadShader.	GLuint programID = glCreateProgram();

			type:empty name:<	glAttachShader(programID, vertexShaderID);
> Token::PASSTHROUGH_SRC line: 119 rae.3d.Shader.Shader.loadShader.	glAttachShader(programID, vertexShaderID);

			type:empty name:<	glAttachShader(programID, fragmentShaderID);
> Token::PASSTHROUGH_SRC line: 120 rae.3d.Shader.Shader.loadShader.	glAttachShader(programID, fragmentShaderID);

			type:empty name:<	glLinkProgram(programID);
> Token::PASSTHROUGH_SRC line: 121 rae.3d.Shader.Shader.loadShader.	glLinkProgram(programID);

			RETURN WHICH IS NOT NEWLINE.
			type:empty name:<	// Check the program
> Token::PASSTHROUGH_SRC line: 123 rae.3d.Shader.Shader.loadShader.	// Check the program

			type:empty name:<	glGetProgramiv(programID, GL_LINK_STATUS, &result);
> Token::PASSTHROUGH_SRC line: 124 rae.3d.Shader.Shader.loadShader.	glGetProgramiv(programID, GL_LINK_STATUS, &result);

			type:empty name:<	glGetProgramiv(programID, GL_INFO_LOG_LENGTH, &infoLogLength);
> Token::PASSTHROUGH_SRC line: 125 rae.3d.Shader.Shader.loadShader.	glGetProgramiv(programID, GL_INFO_LOG_LENGTH, &infoLogLength);

			type:empty name:<	if( infoLogLength > 1 )
> Token::PASSTHROUGH_SRC line: 126 rae.3d.Shader.Shader.loadShader.	if( infoLogLength > 1 )

			type:empty name:<	{
>    Token::PASSTHROUGH_SRC line: 127 rae.3d.Shader.Shader.loadShader.	{

			type:empty name:<		std::cout<<"Error in shader: "<<vertex_file_path << " or "<<fragment_file_path << "\n";
> Token::PASSTHROUGH_SRC line: 128 rae.3d.Shader.Shader.loadShader.		std::cout<<"Error in shader: "<<vertex_file_path << " or "<<fragment_file_path << "\n";

			type:empty name:<		std::vector<char> programErrorMessage(infoLogLength+1);
> Token::PASSTHROUGH_SRC line: 129 rae.3d.Shader.Shader.loadShader.		std::vector<char> programErrorMessage(infoLogLength+1);

			type:empty name:<		glGetProgramInfoLog(programID, infoLogLength, NULL, &programErrorMessage[0]);
> Token::PASSTHROUGH_SRC line: 130 rae.3d.Shader.Shader.loadShader.		glGetProgramInfoLog(programID, infoLogLength, NULL, &programErrorMessage[0]);

			type:empty name:<		std::cout << &programErrorMessage[0] << "\n";
> Token::PASSTHROUGH_SRC line: 131 rae.3d.Shader.Shader.loadShader.		std::cout << &programErrorMessage[0] << "\n";

			type:empty name:<		getchar();
> Token::PASSTHROUGH_SRC line: 132 rae.3d.Shader.Shader.loadShader.		getchar();

			type:empty name:<		return shaderID = 0;
> Token::PASSTHROUGH_SRC line: 133 rae.3d.Shader.Shader.loadShader.		return shaderID = 0;

			type:empty name:<	}
>    Token::PASSTHROUGH_SRC line: 134 rae.3d.Shader.Shader.loadShader.	}

			RETURN WHICH IS NOT NEWLINE.
			type:empty name:<	glDeleteShader(vertexShaderID);
> Token::PASSTHROUGH_SRC line: 136 rae.3d.Shader.Shader.loadShader.	glDeleteShader(vertexShaderID);

			type:empty name:<	glDeleteShader(fragmentShaderID);
> Token::PASSTHROUGH_SRC line: 137 rae.3d.Shader.Shader.loadShader.	glDeleteShader(fragmentShaderID);

			RETURN WHICH IS NOT NEWLINE.
			type:empty name:<	return shaderID = programID;
> Token::PASSTHROUGH_SRC line: 139 rae.3d.Shader.Shader.loadShader.	return shaderID = programID;

			type:empty name:<@end>   Token::PRAGMA_CPP_END line: 140 rae.3d.Shader.Shader.loadShader.@end
			NEWLINE
			type:empty name:<}>      Token::SCOPE_END line: 140 rae.3d.Shader.Shader.loadShader.}
		NEWLINE
		NEWLINE
		type:empty name:<}>      Token::SCOPE_END line: 142 rae.3d.Shader.Shader.}
	NEWLINE
	NEWLINE
	type:empty name:empty    Token::CLOSE_MODULE line: 144 rae.3d.Shader.
